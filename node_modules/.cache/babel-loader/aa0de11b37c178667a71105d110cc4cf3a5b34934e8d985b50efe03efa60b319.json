{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\usuario\\\\Documents\\\\fullstack\\\\notas-app\\\\src\\\\components\\\\Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartComponent = ({\n  notes,\n  filter\n}) => {\n  _s();\n  const pieCanvasRef = useRef(null);\n  const barCanvasRef = useRef(null);\n  useEffect(() => {\n    const filteredNotes = filter.length > 0 ? notes.filter(note => filter.includes(note.category)) : notes;\n    const categories = ['personal', 'work', 'tasks', 'other'];\n    const categoryIcons = {\n      personal: 'icon-personal.png',\n      work: 'icon-work.png',\n      tasks: 'icon-tasks.png',\n      other: 'icon-other.png'\n    };\n    const categoryCounts = categories.map(category => filteredNotes.filter(note => note.category === category).length);\n    const colors = ['#8eb8e5', '#d3b8ae', '#6cbf6f', '#d6b8db'];\n    const images = categories.map(category => {\n      const img = new Image();\n      img.src = categoryIcons[category];\n      return img;\n    });\n\n    // Datos y configuración del gráfico de pastel\n    const pieCtx = pieCanvasRef.current.getContext('2d');\n    const pieData = {\n      labels: categories,\n      datasets: [{\n        data: categoryCounts,\n        backgroundColor: colors\n      }]\n    };\n    const pieChart = new Chart(pieCtx, {\n      type: 'pie',\n      data: pieData,\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true\n          }\n        }\n      },\n      plugins: [{\n        id: 'centerIcons',\n        afterDatasetsDraw: chart => {\n          const {\n            ctx,\n            chartArea: {\n              left,\n              top,\n              width,\n              height\n            }\n          } = chart;\n          const dataset = chart.getDatasetMeta(0).data;\n          dataset.forEach((data, index) => {\n            const {\n              x,\n              y\n            } = data.tooltipPosition();\n            const img = images[index];\n            ctx.drawImage(img, x - 15, y - 15, 30, 30);\n          });\n        }\n      }]\n    });\n\n    // Datos y configuración del gráfico de barras\n    const barCtx = barCanvasRef.current.getContext('2d');\n    const barData = {\n      labels: categories,\n      datasets: [{\n        label: 'Notas por categoría',\n        data: categoryCounts,\n        backgroundColor: colors\n      }]\n    };\n    const barChart = new Chart(barCtx, {\n      type: 'bar',\n      data: barData,\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true\n          }\n        },\n        scales: {\n          x: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'Categorías'\n            }\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'Número de notas'\n            }\n          }\n        }\n      }\n    });\n    return () => {\n      pieChart.destroy();\n      barChart.destroy();\n    };\n  }, [notes, filter]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: pieCanvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: barCanvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n_s(ChartComponent, \"PKZZTeperTn+g6BE6piz8V41Ukc=\");\n_c = ChartComponent;\nexport default ChartComponent;\nvar _c;\n$RefreshReg$(_c, \"ChartComponent\");","map":{"version":3,"names":["React","useRef","useEffect","Chart","jsxDEV","_jsxDEV","ChartComponent","notes","filter","_s","pieCanvasRef","barCanvasRef","filteredNotes","length","note","includes","category","categories","categoryIcons","personal","work","tasks","other","categoryCounts","map","colors","images","img","Image","src","pieCtx","current","getContext","pieData","labels","datasets","data","backgroundColor","pieChart","type","options","responsive","plugins","legend","display","id","afterDatasetsDraw","chart","ctx","chartArea","left","top","width","height","dataset","getDatasetMeta","forEach","index","x","y","tooltipPosition","drawImage","barCtx","barData","label","barChart","scales","beginAtZero","title","text","destroy","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/usuario/Documents/fullstack/notas-app/src/components/Chart.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nconst ChartComponent = ({ notes, filter }) => {\r\n    const pieCanvasRef = useRef(null);\r\n    const barCanvasRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const filteredNotes = filter.length > 0 \r\n            ? notes.filter(note => filter.includes(note.category)) \r\n            : notes;\r\n\r\n        const categories = ['personal', 'work', 'tasks', 'other'];\r\n        const categoryIcons = {\r\n            personal: 'icon-personal.png',\r\n            work: 'icon-work.png',\r\n            tasks: 'icon-tasks.png',\r\n            other: 'icon-other.png',\r\n        };\r\n\r\n        const categoryCounts = categories.map(category => filteredNotes.filter(note => note.category === category).length);\r\n        const colors = ['#8eb8e5', '#d3b8ae', '#6cbf6f', '#d6b8db'];\r\n\r\n        const images = categories.map(category => {\r\n            const img = new Image();\r\n            img.src = categoryIcons[category];\r\n            return img;\r\n        });\r\n\r\n        // Datos y configuración del gráfico de pastel\r\n        const pieCtx = pieCanvasRef.current.getContext('2d');\r\n        const pieData = {\r\n            labels: categories,\r\n            datasets: [{\r\n                data: categoryCounts,\r\n                backgroundColor: colors,\r\n            }]\r\n        };\r\n\r\n        const pieChart = new Chart(pieCtx, {\r\n            type: 'pie',\r\n            data: pieData,\r\n            options: {\r\n                responsive: true,\r\n                plugins: {\r\n                    legend: {\r\n                        display: true\r\n                    }\r\n                }\r\n            },\r\n            plugins: [{\r\n                id: 'centerIcons',\r\n                afterDatasetsDraw: (chart) => {\r\n                    const { ctx, chartArea: { left, top, width, height } } = chart;\r\n                    const dataset = chart.getDatasetMeta(0).data;\r\n\r\n                    dataset.forEach((data, index) => {\r\n                        const { x, y } = data.tooltipPosition();\r\n                        const img = images[index];\r\n                        ctx.drawImage(img, x - 15, y - 15, 30, 30);\r\n                    });\r\n                }\r\n            }]\r\n        });\r\n\r\n        // Datos y configuración del gráfico de barras\r\n        const barCtx = barCanvasRef.current.getContext('2d');\r\n        const barData = {\r\n            labels: categories,\r\n            datasets: [{\r\n                label: 'Notas por categoría',\r\n                data: categoryCounts,\r\n                backgroundColor: colors,\r\n            }]\r\n        };\r\n\r\n        const barChart = new Chart(barCtx, {\r\n            type: 'bar',\r\n            data: barData,\r\n            options: {\r\n                responsive: true,\r\n                plugins: {\r\n                    legend: {\r\n                        display: true\r\n                    }\r\n                },\r\n                scales: {\r\n                    x: {\r\n                        beginAtZero: true,\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Categorías'\r\n                        }\r\n                    },\r\n                    y: {\r\n                        beginAtZero: true,\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Número de notas'\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            pieChart.destroy();\r\n            barChart.destroy();\r\n        };\r\n    }, [notes, filter]);\r\n\r\n    return (\r\n        <div>\r\n            <canvas ref={pieCanvasRef} />\r\n            <canvas ref={barCanvasRef} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}